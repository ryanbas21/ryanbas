# Dockerfile.dev - Hybrid approach: install deps in container, mount source code
FROM node:24-alpine as base

# Install pnpm and system dependencies
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

RUN npm i -g pnpm
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/backend/package.json ./apps/backend/
COPY apps/blog-frontend/package.json ./apps/blog-frontend/
COPY libs/backend-clients/package.json ./libs/backend-clients/
COPY libs/blog-api-spec/package.json ./libs/blog-api-spec/
COPY libs/blog-schemas/package.json ./libs/blog-schemas/

# Install dependencies in container (they'll have correct permissions)
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install

ENV NX_CACHE_DIRECTORY=/app/.nx

FROM base as build

RUN pnpm nx sync
# Don't build here - let NX build on demand when source is mounted
RUN echo "Build stage ready - dependencies installed"

# Backend development stage
FROM base AS backend-dev
EXPOSE 9443
CMD ["sh", "-c", "pnpm nx serve backend --host=0.0.0.0"]

# Frontend development stage
FROM base AS frontend-dev
EXPOSE 8443
CMD ["sh", "-c", "pnpm nx serve blog-frontend --host=0.0.0.0"]
