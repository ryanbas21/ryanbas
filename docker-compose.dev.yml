services:
  # Init container to ensure TypeScript is built and synced
  nx-init:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: base
    volumes:
      - ./apps:/app/apps
      - ./libs:/app/libs
      - ./packages:/app/packages
      - ./dist:/app/dist
      - nx_cache:/app/.nx
      - ./node_modules:/app/node_modules
    environment:
      - NX_DAEMON=false
    command: >
      sh -c "
        echo 'ðŸ”„ Running Nx sync...' &&
        pnpm nx sync &&
        echo 'ðŸ”¨ Building all projects...' &&
        pnpm nx run-many --target=build --all &&
        echo 'âœ… Init complete - TypeScript should be in sync'
      "
    networks:
      - app-network

  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: backend-dev
    ports:
      - "3000:3000"
    environment:
      - NX_DAEMON=false
      - NODE_ENV=development
      - HOST=0.0.0.0
      - PORT=3000
      # OpenTelemetry configuration
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-lgtm:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_SERVICE_NAME=backend
      # contentful- 
      - CONTENTFUL_SPACE_ID=${CONTENTFUL_SPACE_ID}
      - CONTENTFUL_API_KEY=${CONTENTFUL_API_KEY}
      - CONTENTFUL_PREVIEW_KEY=${CONTENTFUL_PREVIEW_KEY}
      - CONTENTFUL_MANAGEMENT_API_ACCESS_TOKEN=${CONTENTFUL_MANAGEMENT_API_ACCESS_TOKEN}
      - CONTENTFUL_ENVIRONMENT=${CONTENTFUL_ENVIRONMENT}
    volumes:
      # Mount source code for hot reloading
      - ./apps/backend:/app/apps/backend
      - ./libs:/app/libs
      - ./packages:/app/packages
      - ./dist:/app/dist
      - nx_cache:/app/.nx
      # - ./node_modules:/app/node_modules
    depends_on:
      nx-init:
        condition: service_completed_successfully
      otel-lgtm:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  blog-frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: frontend-dev
    ports:
      - "3001:3001"
    environment:
      - NX_DAEMON=false
      - NODE_ENV=development
      - HOST=0.0.0.0
      - PORT=3001
    volumes:
      # Mount source code for hot reloading
      - ./apps/blog-frontend:/app/apps/blog-frontend
      - ./libs:/app/libs
      - ./packages:/app/packages
      - ./dist:/app/dist
      - nx_cache:/app/.nx
      - ./node_modules:/app/node_modules
    depends_on:
      nx-init:
        condition: service_completed_successfully
      backend-dev:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  # Nginx reverse proxy for development
  nginx-dev:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - blog-frontend-dev
      - backend-dev
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  # OpenTelemetry stack (Grafana, Loki, Tempo, Prometheus)
  otel-lgtm:
    image: docker.io/grafana/otel-lgtm:latest
    ports:
      - "3002:3000"  # Grafana UI
      - "4317:4317"  # OTLP gRPC receiver
      - "4318:4318"  # OTLP HTTP receiver
    environment:
      - OTEL_METRIC_EXPORT_INTERVAL=500
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis_data:
    driver: local
  nx_cache:
    driver: local

networks:
  app-network:
    driver: bridge
